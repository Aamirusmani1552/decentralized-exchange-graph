// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class poolCreatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save poolCreatedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type poolCreatedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("poolCreatedEntity", id.toString(), this);
    }
  }

  static load(id: string): poolCreatedEntity | null {
    return changetype<poolCreatedEntity | null>(
      store.get("poolCreatedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): BigInt {
    let value = this.get("poolId");
    return value!.toBigInt();
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get minLockPeriod(): BigInt {
    let value = this.get("minLockPeriod");
    return value!.toBigInt();
  }

  set minLockPeriod(value: BigInt) {
    this.set("minLockPeriod", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}

export class EthToTokenSwapSuccessfullEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EthToTokenSwapSuccessfullEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EthToTokenSwapSuccessfullEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EthToTokenSwapSuccessfullEntity", id.toString(), this);
    }
  }

  static load(id: string): EthToTokenSwapSuccessfullEntity | null {
    return changetype<EthToTokenSwapSuccessfullEntity | null>(
      store.get("EthToTokenSwapSuccessfullEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethSwapped(): BigInt {
    let value = this.get("ethSwapped");
    return value!.toBigInt();
  }

  set ethSwapped(value: BigInt) {
    this.set("ethSwapped", Value.fromBigInt(value));
  }

  get tokenReceived(): BigInt {
    let value = this.get("tokenReceived");
    return value!.toBigInt();
  }

  set tokenReceived(value: BigInt) {
    this.set("tokenReceived", Value.fromBigInt(value));
  }

  get transactionFee(): BigInt {
    let value = this.get("transactionFee");
    return value!.toBigInt();
  }

  set transactionFee(value: BigInt) {
    this.set("transactionFee", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }
}

export class TokenToEthSwapSuccessfullEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TokenToEthSwapSuccessfullEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenToEthSwapSuccessfullEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenToEthSwapSuccessfullEntity", id.toString(), this);
    }
  }

  static load(id: string): TokenToEthSwapSuccessfullEntity | null {
    return changetype<TokenToEthSwapSuccessfullEntity | null>(
      store.get("TokenToEthSwapSuccessfullEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenSwapped(): BigInt {
    let value = this.get("tokenSwapped");
    return value!.toBigInt();
  }

  set tokenSwapped(value: BigInt) {
    this.set("tokenSwapped", Value.fromBigInt(value));
  }

  get tokenReceived(): BigInt {
    let value = this.get("tokenReceived");
    return value!.toBigInt();
  }

  set tokenReceived(value: BigInt) {
    this.set("tokenReceived", Value.fromBigInt(value));
  }

  get transactionFee(): BigInt {
    let value = this.get("transactionFee");
    return value!.toBigInt();
  }

  set transactionFee(value: BigInt) {
    this.set("transactionFee", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }
}

export class tokenSwappedSuccessfullyEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save tokenSwappedSuccessfullyEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type tokenSwappedSuccessfullyEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("tokenSwappedSuccessfullyEntity", id.toString(), this);
    }
  }

  static load(id: string): tokenSwappedSuccessfullyEntity | null {
    return changetype<tokenSwappedSuccessfullyEntity | null>(
      store.get("tokenSwappedSuccessfullyEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenSwapped(): BigInt {
    let value = this.get("tokenSwapped");
    return value!.toBigInt();
  }

  set tokenSwapped(value: BigInt) {
    this.set("tokenSwapped", Value.fromBigInt(value));
  }

  get tokenReceived(): BigInt {
    let value = this.get("tokenReceived");
    return value!.toBigInt();
  }

  set tokenReceived(value: BigInt) {
    this.set("tokenReceived", Value.fromBigInt(value));
  }

  get transactionFee(): BigInt {
    let value = this.get("transactionFee");
    return value!.toBigInt();
  }

  set transactionFee(value: BigInt) {
    this.set("transactionFee", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }
}

export class LiquidityWithdrawSuccessfullEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LiquidityWithdrawSuccessfullEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidityWithdrawSuccessfullEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiquidityWithdrawSuccessfullEntity", id.toString(), this);
    }
  }

  static load(id: string): LiquidityWithdrawSuccessfullEntity | null {
    return changetype<LiquidityWithdrawSuccessfullEntity | null>(
      store.get("LiquidityWithdrawSuccessfullEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): BigInt {
    let value = this.get("poolId");
    return value!.toBigInt();
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get tokenToRecieve(): BigInt {
    let value = this.get("tokenToRecieve");
    return value!.toBigInt();
  }

  set tokenToRecieve(value: BigInt) {
    this.set("tokenToRecieve", Value.fromBigInt(value));
  }

  get tokenToReceiveWithInterest(): BigInt {
    let value = this.get("tokenToReceiveWithInterest");
    return value!.toBigInt();
  }

  set tokenToReceiveWithInterest(value: BigInt) {
    this.set("tokenToReceiveWithInterest", Value.fromBigInt(value));
  }

  get totalInterestEarned(): BigInt {
    let value = this.get("totalInterestEarned");
    return value!.toBigInt();
  }

  set totalInterestEarned(value: BigInt) {
    this.set("totalInterestEarned", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }
}

export class allTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save allTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type allTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("allTransaction", id.toString(), this);
    }
  }

  static load(id: string): allTransaction | null {
    return changetype<allTransaction | null>(store.get("allTransaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenSwapped(): BigInt {
    let value = this.get("tokenSwapped");
    return value!.toBigInt();
  }

  set tokenSwapped(value: BigInt) {
    this.set("tokenSwapped", Value.fromBigInt(value));
  }

  get tokenReceived(): BigInt {
    let value = this.get("tokenReceived");
    return value!.toBigInt();
  }

  set tokenReceived(value: BigInt) {
    this.set("tokenReceived", Value.fromBigInt(value));
  }

  get transactionFee(): BigInt {
    let value = this.get("transactionFee");
    return value!.toBigInt();
  }

  set transactionFee(value: BigInt) {
    this.set("transactionFee", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }
}
