// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EthToTokenSwapSuccessfull extends ethereum.Event {
  get params(): EthToTokenSwapSuccessfull__Params {
    return new EthToTokenSwapSuccessfull__Params(this);
  }
}

export class EthToTokenSwapSuccessfull__Params {
  _event: EthToTokenSwapSuccessfull;

  constructor(event: EthToTokenSwapSuccessfull) {
    this._event = event;
  }

  get ethSwapped(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenReceived(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get transactionFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LiquidityWithdrawSuccessfull extends ethereum.Event {
  get params(): LiquidityWithdrawSuccessfull__Params {
    return new LiquidityWithdrawSuccessfull__Params(this);
  }
}

export class LiquidityWithdrawSuccessfull__Params {
  _event: LiquidityWithdrawSuccessfull;

  constructor(event: LiquidityWithdrawSuccessfull) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenToRecieve(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenToReceiveWithInterest(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalInterestEarned(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenAddressesSet extends ethereum.Event {
  get params(): TokenAddressesSet__Params {
    return new TokenAddressesSet__Params(this);
  }
}

export class TokenAddressesSet__Params {
  _event: TokenAddressesSet;

  constructor(event: TokenAddressesSet) {
    this._event = event;
  }

  get param0(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get param1(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenToEthSwapSuccessfull extends ethereum.Event {
  get params(): TokenToEthSwapSuccessfull__Params {
    return new TokenToEthSwapSuccessfull__Params(this);
  }
}

export class TokenToEthSwapSuccessfull__Params {
  _event: TokenToEthSwapSuccessfull;

  constructor(event: TokenToEthSwapSuccessfull) {
    this._event = event;
  }

  get tokenSwapped(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenReceived(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get transactionFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class TokensAdded extends ethereum.Event {
  get params(): TokensAdded__Params {
    return new TokensAdded__Params(this);
  }
}

export class TokensAdded__Params {
  _event: TokensAdded;

  constructor(event: TokensAdded) {
    this._event = event;
  }

  get param0(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get param1(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokensRemvod extends ethereum.Event {
  get params(): TokensRemvod__Params {
    return new TokensRemvod__Params(this);
  }
}

export class TokensRemvod__Params {
  _event: TokensRemvod;

  constructor(event: TokensRemvod) {
    this._event = event;
  }

  get param0(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get param1(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class chainLinkPriceFeedAdded extends ethereum.Event {
  get params(): chainLinkPriceFeedAdded__Params {
    return new chainLinkPriceFeedAdded__Params(this);
  }
}

export class chainLinkPriceFeedAdded__Params {
  _event: chainLinkPriceFeedAdded;

  constructor(event: chainLinkPriceFeedAdded) {
    this._event = event;
  }

  get tokenAddresses(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get contractAddresses(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class poolCreated extends ethereum.Event {
  get params(): poolCreated__Params {
    return new poolCreated__Params(this);
  }
}

export class poolCreated__Params {
  _event: poolCreated;

  constructor(event: poolCreated) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get minLockPeriod(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get active(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class tokenSwappedSuccessfully extends ethereum.Event {
  get params(): tokenSwappedSuccessfully__Params {
    return new tokenSwappedSuccessfully__Params(this);
  }
}

export class tokenSwappedSuccessfully__Params {
  _event: tokenSwappedSuccessfully;

  constructor(event: tokenSwappedSuccessfully) {
    this._event = event;
  }

  get tokenSwapped(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenReceived(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get transactionFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class DEX__checkPoolWithIdResultValue0Struct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get minLockPeriod(): BigInt {
    return this[3].toBigInt();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get active(): boolean {
    return this[5].toBoolean();
  }
}

export class DEX extends ethereum.SmartContract {
  static bind(address: Address): DEX {
    return new DEX("DEX", address);
  }

  calculateExchangeToken(from: Address, to: Address, amount: BigInt): BigInt {
    let result = super.call(
      "calculateExchangeToken",
      "calculateExchangeToken(address,address,uint256):(int256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateExchangeToken(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateExchangeToken",
      "calculateExchangeToken(address,address,uint256):(int256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateExchangeTokenAfterFee(
    from: Address,
    to: Address,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "calculateExchangeTokenAfterFee",
      "calculateExchangeTokenAfterFee(address,address,uint256):(int256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateExchangeTokenAfterFee(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateExchangeTokenAfterFee",
      "calculateExchangeTokenAfterFee(address,address,uint256):(int256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkContributionIds(contributer: Address): Array<BigInt> {
    let result = super.call(
      "checkContributionIds",
      "checkContributionIds(address):(uint256[])",
      [ethereum.Value.fromAddress(contributer)]
    );

    return result[0].toBigIntArray();
  }

  try_checkContributionIds(
    contributer: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "checkContributionIds",
      "checkContributionIds(address):(uint256[])",
      [ethereum.Value.fromAddress(contributer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  checkPoolBalanceForToken(token: Address): BigInt {
    let result = super.call(
      "checkPoolBalanceForToken",
      "checkPoolBalanceForToken(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_checkPoolBalanceForToken(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkPoolBalanceForToken",
      "checkPoolBalanceForToken(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkPoolWithId(id: BigInt): DEX__checkPoolWithIdResultValue0Struct {
    let result = super.call(
      "checkPoolWithId",
      "checkPoolWithId(uint256):((address,uint256,uint256,uint256,address,bool))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return changetype<DEX__checkPoolWithIdResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_checkPoolWithId(
    id: BigInt
  ): ethereum.CallResult<DEX__checkPoolWithIdResultValue0Struct> {
    let result = super.tryCall(
      "checkPoolWithId",
      "checkPoolWithId(uint256):((address,uint256,uint256,uint256,address,bool))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DEX__checkPoolWithIdResultValue0Struct>(value[0].toTuple())
    );
  }

  getPriceFeedContract(token: Address): Address {
    let result = super.call(
      "getPriceFeedContract",
      "getPriceFeedContract(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toAddress();
  }

  try_getPriceFeedContract(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPriceFeedContract",
      "getPriceFeedContract(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s_validTokenAddresses(param0: BigInt): Address {
    let result = super.call(
      "s_validTokenAddresses",
      "s_validTokenAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_s_validTokenAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "s_validTokenAddresses",
      "s_validTokenAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportedTokens(): Array<Address> {
    let result = super.call(
      "supportedTokens",
      "supportedTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_supportedTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "supportedTokens",
      "supportedTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get tokenAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get chainlinkAggregatorV3Addr(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get wethContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddChainlinkPriceFeedsCall extends ethereum.Call {
  get inputs(): AddChainlinkPriceFeedsCall__Inputs {
    return new AddChainlinkPriceFeedsCall__Inputs(this);
  }

  get outputs(): AddChainlinkPriceFeedsCall__Outputs {
    return new AddChainlinkPriceFeedsCall__Outputs(this);
  }
}

export class AddChainlinkPriceFeedsCall__Inputs {
  _call: AddChainlinkPriceFeedsCall;

  constructor(call: AddChainlinkPriceFeedsCall) {
    this._call = call;
  }

  get tokenAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get contractAddresses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class AddChainlinkPriceFeedsCall__Outputs {
  _call: AddChainlinkPriceFeedsCall;

  constructor(call: AddChainlinkPriceFeedsCall) {
    this._call = call;
  }
}

export class AddTokensCall extends ethereum.Call {
  get inputs(): AddTokensCall__Inputs {
    return new AddTokensCall__Inputs(this);
  }

  get outputs(): AddTokensCall__Outputs {
    return new AddTokensCall__Outputs(this);
  }
}

export class AddTokensCall__Inputs {
  _call: AddTokensCall;

  constructor(call: AddTokensCall) {
    this._call = call;
  }

  get tokenAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddTokensCall__Outputs {
  _call: AddTokensCall;

  constructor(call: AddTokensCall) {
    this._call = call;
  }
}

export class ProvideLiquidityCall extends ethereum.Call {
  get inputs(): ProvideLiquidityCall__Inputs {
    return new ProvideLiquidityCall__Inputs(this);
  }

  get outputs(): ProvideLiquidityCall__Outputs {
    return new ProvideLiquidityCall__Outputs(this);
  }
}

export class ProvideLiquidityCall__Inputs {
  _call: ProvideLiquidityCall;

  constructor(call: ProvideLiquidityCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ProvideLiquidityCall__Outputs {
  _call: ProvideLiquidityCall;

  constructor(call: ProvideLiquidityCall) {
    this._call = call;
  }
}

export class ProvideLiquidityInEthCall extends ethereum.Call {
  get inputs(): ProvideLiquidityInEthCall__Inputs {
    return new ProvideLiquidityInEthCall__Inputs(this);
  }

  get outputs(): ProvideLiquidityInEthCall__Outputs {
    return new ProvideLiquidityInEthCall__Outputs(this);
  }
}

export class ProvideLiquidityInEthCall__Inputs {
  _call: ProvideLiquidityInEthCall;

  constructor(call: ProvideLiquidityInEthCall) {
    this._call = call;
  }
}

export class ProvideLiquidityInEthCall__Outputs {
  _call: ProvideLiquidityInEthCall;

  constructor(call: ProvideLiquidityInEthCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}

export class RenewAddressesCall extends ethereum.Call {
  get inputs(): RenewAddressesCall__Inputs {
    return new RenewAddressesCall__Inputs(this);
  }

  get outputs(): RenewAddressesCall__Outputs {
    return new RenewAddressesCall__Outputs(this);
  }
}

export class RenewAddressesCall__Inputs {
  _call: RenewAddressesCall;

  constructor(call: RenewAddressesCall) {
    this._call = call;
  }

  get tokenAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RenewAddressesCall__Outputs {
  _call: RenewAddressesCall;

  constructor(call: RenewAddressesCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class SwapTokenToWETHCall extends ethereum.Call {
  get inputs(): SwapTokenToWETHCall__Inputs {
    return new SwapTokenToWETHCall__Inputs(this);
  }

  get outputs(): SwapTokenToWETHCall__Outputs {
    return new SwapTokenToWETHCall__Outputs(this);
  }
}

export class SwapTokenToWETHCall__Inputs {
  _call: SwapTokenToWETHCall;

  constructor(call: SwapTokenToWETHCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SwapTokenToWETHCall__Outputs {
  _call: SwapTokenToWETHCall;

  constructor(call: SwapTokenToWETHCall) {
    this._call = call;
  }
}

export class SwapWETHToTokenCall extends ethereum.Call {
  get inputs(): SwapWETHToTokenCall__Inputs {
    return new SwapWETHToTokenCall__Inputs(this);
  }

  get outputs(): SwapWETHToTokenCall__Outputs {
    return new SwapWETHToTokenCall__Outputs(this);
  }
}

export class SwapWETHToTokenCall__Inputs {
  _call: SwapWETHToTokenCall;

  constructor(call: SwapWETHToTokenCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SwapWETHToTokenCall__Outputs {
  _call: SwapWETHToTokenCall;

  constructor(call: SwapWETHToTokenCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
